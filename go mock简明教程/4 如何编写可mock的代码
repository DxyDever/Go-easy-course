4 如何编写可mock的代码

写可测试的代码与写好测试用例是同等重要的，如何写可 mock 的代码呢？

mock 作用的是接口，因此将依赖抽象为接口，而不是直接依赖具体的类。
不直接依赖的实例，而是使用依赖注入降低耦合性。
在软件工程中，依赖注入的意思为，给予调用方它所需要的事物。 “依赖”是指可被方法调用的事物。依赖注入形式下，调用方不再直接指使用“依赖”，取而代之是“注入” 。“注入”是指将“依赖”传递给调用方的过程。在“注入”之后，调用方才会调用该“依赖”。传递依赖给调用方，而不是让让调用方直接获得依赖，这个是该设计的根本需求。
– 依赖注入 - Wikipedia

如果 GetFromDB() 方法长这个样子


//调用这个接口对象的方法，所以mock接口，mock作用的是接口

func GetFromDB(key string) int {
	db := NewDB()
	if value, err := db.Get(key); err == nil {
		return value
	}

	return -1
}
对 DB 接口的 mock 并不能作用于 GetFromDB() 内部，这样写是没办法进行测试的。那如果将接口 db DB 通过参数传递到 GetFromDB()，那么就可以轻而易举地传入 Mock 对象了。